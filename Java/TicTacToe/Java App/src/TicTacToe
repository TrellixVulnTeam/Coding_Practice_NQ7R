import java.util.ArrayList;

public class BoardState {

    int[][] boardState;
    BoardState nextState;

    public BoardState(int[][] state) {
        this.boardState = state;
        this.nextState = nextState;
    }

}

public class TicTacToe {

    int playerSymbol;
    int aiSymbol;
    boolean playerWentFirst;
    BoardState boardTree;

    // Starts tree after first move to cut computation 9! -> 8!
    public TicTacToe(boolean playerWentFirst, int symbol, int firstMoveLocation) {
        int[][] initialBoard = getInitialBoardState();
        this.playerSymbol = ((playerWentFirst)? symbol : ((symbol == 1)? 3 : 1));
        this.aiSymbol = getAISymbol();
        initialBoard = markBoardWithMove(symbol, firstMoveLocation, initialBoard);
        this.boardTree = new BoardState(initialBoard);
        printBoard(initialBoard);
    }

    public void printBoard(int[][] board) {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println()
        }
    }

    public void printBoard(int[] board) {
        for (int i = 0; i < 3; i++) {
            System.out.print(board[i] + " ");
        }
        System.out.println()
    }

    public int[][] markBoardWithMove(int symbol, int location, int[][] board) {
        int r_c = get2DIndexFrom1DArray(location);
        int r = r_c[0];
        int c = r_c[1];
        board[r][c] = symbol;
        return board;
    }

    public int getAISymbol() {
        return ((this.getPLayerSymbol() == 1)? 3 : 1);
    }

    public in getPLayerSymbol() {
        return this.playerSymbol;
    }

    public int[] get2DIndexFrom1DArray(int index) {
        return {index / 3, index % 3};
    }

    public int[][] getInitialBoardState() {
        return {{2, 2, 2}, {2, 2, 2}, {2, 2, 2}};
    }

}