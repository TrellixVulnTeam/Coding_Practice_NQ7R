#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 60 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 28 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
49 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
50 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
          0 3100 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 1 #"#"
0 0 17 3 1 #"|"
0 0 17 29 1 #"\n"
0 0 17 3 38 #" Pokemon type effectiveness evaluator."
0 0 17 29 1 #"\n"
0 0 17 3 14 #" February 2019"
0 0 17 29 1 #"\n"
0 0 17 3 13 #" Avery Briggs"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 4 #"json"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 8 #"explorer"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 4 #"math"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"file1"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"./full_pokedex.json\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"file2"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"./pokemonTypes.json\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"read-json-file"
0 0 24 3 1 #" "
0 0 14 3 9 #"file-name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 20 #"with-input-from-file"
0 0 24 3 1 #" "
0 0 14 3 9 #"file-name"
0 0 24 3 1 #" "
0 0 14 3 9 #"read-json"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"visualize-json-file"
0 0 24 3 1 #" "
0 0 14 3 9 #"file-name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"explore"
0 0 24 3 2 #" ("
0 0 14 3 14 #"read-json-file"
0 0 24 3 1 #" "
0 0 14 3 9 #"file-name"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; The parsed pokedex json file in hasheq form"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; lists all pokemon and data."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"readFile"
0 0 24 3 2 #" ("
0 0 14 3 14 #"read-json-file"
0 0 24 3 1 #" "
0 0 14 3 5 #"file1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";; The parsed types json file in hasheq form"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; lists all pokemon and data."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"typesFile"
0 0 24 3 2 #" ("
0 0 14 3 14 #"read-json-file"
0 0 24 3 1 #" "
0 0 14 3 5 #"file2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #"; getAllTypes returns a list of all types in"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; the fullPokedex.json file."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"getAllTypes"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"type"
0 0 24 3 3 #")) "
0 0 14 3 8 #"readFile"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #"; getAllNames returns a list of all names in"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; the fullPokedex.json file."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"getAllNames"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"name"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"english"
0 0 24 3 3 #")) "
0 0 14 3 8 #"readFile"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";;Returns a boolean value #t if the pokemon"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;is in the hasheq, #f if not."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"isMember"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (["
0 0 14 3 4 #"item"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 3 #") ("
0 0 14 3 14 #"symbol->string"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 4 #"])])"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 45 #"; currPokemonTypes takes in a pokemon name in"
0 0 24 29 1 #"\n"
0 0 17 3 49 #"; string format, and returns the types asscoiated"
0 0 24 29 1 #"\n"
0 0 17 3 45 #"; with that pokemon, an error message will be"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; returned if the pokemon is not valid."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"currPokemonTypes"
0 0 24 3 1 #" "
0 0 14 3 7 #"pokemon"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 8 #"allNames"
0 0 24 3 2 #" ("
0 0 14 3 11 #"getAllNames"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"isMember"
0 0 24 3 1 #" "
0 0 14 3 7 #"pokemon"
0 0 24 3 1 #" "
0 0 14 3 8 #"allNames"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 9 #"removeAll"
0 0 24 3 1 #" "
0 0 19 3 3 #"\" \""
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"name"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"english"
0 0 24 3 2 #") "
0 0 14 3 7 #"pokemon"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"type"
0 0 24 3 2 #") "
0 0 19 3 3 #"\" \""
0 0 24 3 3 #")) "
0 0 14 3 8 #"readFile"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 17 #"\"Invalid Pokemon\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"module+"
0 0 24 3 1 #" "
0 0 14 3 4 #"test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 8 #"rackunit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 16 #"currPokemonTypes"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"Pickachu\""
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 17 #"\"Invalid Pokemon\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 16 #"currPokemonTypes"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"Gengar\""
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 7 #"\"Ghost\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"Poison\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; removeAll takes a string and a list and removes all"
0 0 24 29 1 #"\n"
0 0 17 3 52 #"; occurences of the string from the list of strings."
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; used for removing spaces from currPokemonTypes return"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; value. "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"removeAll"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 7 #"))))]))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 50 #"; currPokemonStrAtk takes in a pokemon name string"
0 0 24 29 1 #"\n"
0 0 17 3 52 #"; and returns a list of sorted unique types that the"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; given pokemon has a type advantage over when attacking"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; that type (Effectiveness = 2.0 dealt)."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"currPokemonStrAtk"
0 0 24 3 1 #" "
0 0 14 3 7 #"pokemon"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 9 #"currTypes"
0 0 24 3 2 #" ("
0 0 14 3 16 #"currPokemonTypes"
0 0 24 3 1 #" "
0 0 14 3 7 #"pokemon"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"Invalid Pokemon\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 9 #"currTypes"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 17 #"currPokemonStrAtk"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"Error Invalid Pokemon\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"sort"
0 0 24 3 2 #" ("
0 0 14 3 17 #"remove-duplicates"
0 0 24 3 2 #" ("
0 0 14 3 7 #"flatten"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"type"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 9 #"removeAll"
0 0 24 3 1 #" "
0 0 19 3 3 #"\" \""
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"languages"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"english"
0 0 24 3 2 #") "
0 0 14 3 4 #"type"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 13 #"typeEffective"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 9 #"strongAtk"
0 0 24 3 2 #") "
0 0 19 3 3 #"\" \""
0 0 24 3 3 #")) "
0 0 14 3 9 #"typesFile"
0 0 24 3 4 #"))) "
0 0 14 3 9 #"currTypes"
0 0 24 3 4 #"))) "
0 0 14 3 8 #"string<?"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 50 #"; currPokemonStrDef takes in a pokemon name string"
0 0 24 29 1 #"\n"
0 0 17 3 51 #"; and returns a list of sorted types that the given"
0 0 24 29 1 #"\n"
0 0 17 3 50 #"; pokemon has a type advantage over when defending"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; that type (Effectiveness = 0.5 recieved)."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"currPokemonStrDef"
0 0 24 3 1 #" "
0 0 14 3 7 #"pokemon"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 9 #"currTypes"
0 0 24 3 2 #" ("
0 0 14 3 16 #"currPokemonTypes"
0 0 24 3 1 #" "
0 0 14 3 7 #"pokemon"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"Invalid Pokemon\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 9 #"currTypes"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 17 #"currPokemonStrAtk"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"Error Invalid Pokemon\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"sort"
0 0 24 3 2 #" ("
0 0 14 3 7 #"flatten"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"type"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 9 #"removeAll"
0 0 24 3 1 #" "
0 0 19 3 3 #"\" \""
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"languages"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"english"
0 0 24 3 2 #") "
0 0 14 3 4 #"type"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 13 #"typeEffective"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 9 #"strongDef"
0 0 24 3 2 #") "
0 0 19 3 3 #"\" \""
0 0 24 3 3 #")) "
0 0 14 3 9 #"typesFile"
0 0 24 3 4 #"))) "
0 0 14 3 9 #"currTypes"
0 0 24 3 3 #")) "
0 0 14 3 8 #"string<?"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 52 #"; currPokemonNoEffect takes in a pokemon name string"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; and returns a list of sorted unique types that"
0 0 24 29 1 #"\n"
0 0 17 3 49 #"; given pokemon has no type Effect when attacking"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; that type (Effectiveness = 0.0 dealt)."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"currPokemonNoEffect"
0 0 24 3 1 #" "
0 0 14 3 7 #"pokemon"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 9 #"currTypes"
0 0 24 3 2 #" ("
0 0 14 3 16 #"currPokemonTypes"
0 0 24 3 1 #" "
0 0 14 3 7 #"pokemon"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 19 3 17 #"\"Invalid Pokemon\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 9 #"currTypes"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 17 #"currPokemonStrAtk"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"Error Invalid Pokemon\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"sort"
0 0 24 3 2 #" ("
0 0 14 3 17 #"remove-duplicates"
0 0 24 3 2 #" ("
0 0 14 3 7 #"flatten"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"type"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 9 #"removeAll"
0 0 24 3 1 #" "
0 0 19 3 3 #"\" \""
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"languages"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"english"
0 0 24 3 2 #") "
0 0 14 3 4 #"type"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 13 #"typeEffective"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 8 #"noEffect"
0 0 24 3 2 #") "
0 0 19 3 3 #"\" \""
0 0 24 3 3 #")) "
0 0 14 3 9 #"typesFile"
0 0 24 3 4 #"))) "
0 0 14 3 9 #"currTypes"
0 0 24 3 4 #"))) "
0 0 14 3 8 #"string<?"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; gathrTypeInfo takes in a pokemons name string"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; and returns a hasheq of that pokemons:"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; noEffect"
0 0 24 29 1 #"\n"
0 0 17 3 6 #"; name"
0 0 24 29 1 #"\n"
0 0 17 3 7 #"; type "
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; strAttack"
0 0 24 29 1 #"\n"
0 0 17 3 8 #"; strDef"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; all values are lists of strings and should be"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; accessed using string indexing after calling"
0 0 24 29 1 #"\n"
0 0 17 3 38 #"; hash->licst on the resulting hasheq."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"gatherTypeInfo"
0 0 24 3 1 #" "
0 0 14 3 7 #"pokemon"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 6 #"strAtk"
0 0 24 3 2 #" ("
0 0 14 3 17 #"currPokemonStrAtk"
0 0 24 3 1 #" "
0 0 14 3 7 #"pokemon"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 6 #"strDef"
0 0 24 3 2 #" ("
0 0 14 3 17 #"currPokemonStrDef"
0 0 24 3 1 #" "
0 0 14 3 7 #"pokemon"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 8 #"noEffect"
0 0 24 3 2 #" ("
0 0 14 3 19 #"currPokemonNoEffect"
0 0 24 3 1 #" "
0 0 14 3 7 #"pokemon"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 4 #"type"
0 0 24 3 2 #" ("
0 0 14 3 16 #"currPokemonTypes"
0 0 24 3 1 #" "
0 0 14 3 7 #"pokemon"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"hasheq"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"type\""
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"noEffect\""
0 0 24 3 1 #" "
0 0 14 3 8 #"noEffect"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"strAtk\""
0 0 24 3 1 #" "
0 0 14 3 6 #"strAtk"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"strDef\""
0 0 24 3 1 #" "
0 0 14 3 6 #"strDef"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"name\""
0 0 24 3 1 #" "
0 0 14 3 7 #"pokemon"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"module+"
0 0 24 3 1 #" "
0 0 14 3 4 #"test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 8 #"rackunit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"gatherTypeInfo"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"Charmander\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 21 3 1 #"'"
0 0 24 3 9 #"#hasheq(("
0 0 19 3 6 #"\"type\""
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 2 #" ("
0 0 19 3 6 #"\"Fire\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 19 3 8 #"\"strDef\""
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"Bug\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Fairy\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Fire\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Grass\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"Ice\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Steel\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 19 3 10 #"\"noEffect\""
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 4 #" ())"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 19 3 6 #"\"name\""
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 19 3 12 #"\"Charmander\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 19 3 8 #"\"strAtk\""
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"Bug\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Grass\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"Ice\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Steel\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"gatherTypeInfo"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"Gengar\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 21 3 1 #"'"
0 0 24 3 9 #"#hasheq(("
0 0 19 3 6 #"\"type\""
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 2 #" ("
0 0 19 3 7 #"\"Ghost\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"Poison\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 19 3 8 #"\"strDef\""
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"Bug\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"Bug\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Fairy\""
0 0 24 3 1 #" "
0 0 19 3 10 #"\"Fighting\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Grass\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"Poison\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"Poison\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 19 3 10 #"\"noEffect\""
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 2 #" ("
0 0 19 3 8 #"\"Normal\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 19 3 6 #"\"name\""
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 1 #" "
0 0 19 3 8 #"\"Gengar\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 19 3 8 #"\"strAtk\""
0 0 24 3 1 #" "
0 0 28 3 1 #"."
0 0 24 3 2 #" ("
0 0 19 3 7 #"\"Ghost\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Grass\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"Poison\""
0 0 24 3 1 #" "
0 0 19 3 9 #"\"Psychic\""
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; getAttribute takes in a hasheq, meant for the"
0 0 24 29 1 #"\n"
0 0 17 3 52 #"; resulting call of gatherTypeInfo, and an attribute"
0 0 24 29 1 #"\n"
0 0 17 3 67
(
 #"; as a string (one of: \"name\",\"type\",\"strAtk\",\"strDef\",\"noE"
 #"ffect\")."
) 0 0 24 29 1 #"\n"
0 0 17 3 56 #"; returns the value asscoiated with the attribute given."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"getAttribute"
0 0 24 3 1 #" "
0 0 14 3 4 #"info"
0 0 24 3 1 #" "
0 0 14 3 3 #"att"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 4 #"info"
0 0 24 3 2 #" ("
0 0 14 3 10 #"hash->list"
0 0 24 3 1 #" "
0 0 14 3 4 #"info"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 3 #"att"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #"))) "
0 0 14 3 4 #"info"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"module+"
0 0 24 3 1 #" "
0 0 14 3 4 #"test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 8 #"rackunit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"getAttribute"
0 0 24 3 2 #" ("
0 0 14 3 14 #"gatherTypeInfo"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"Charmander\""
0 0 24 3 2 #") "
0 0 19 3 6 #"\"name\""
0 0 24 3 2 #") "
0 0 19 3 12 #"\"Charmander\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"getAttribute"
0 0 24 3 2 #" ("
0 0 14 3 14 #"gatherTypeInfo"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"Charmander\""
0 0 24 3 2 #") "
0 0 19 3 6 #"\"type\""
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 6 #"\"Fire\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"getAttribute"
0 0 24 3 2 #" ("
0 0 14 3 14 #"gatherTypeInfo"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"Charmander\""
0 0 24 3 2 #") "
0 0 19 3 10 #"\"noEffect\""
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"getAttribute"
0 0 24 3 2 #" ("
0 0 14 3 14 #"gatherTypeInfo"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"Charmander\""
0 0 24 3 2 #") "
0 0 19 3 8 #"\"strAtk\""
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 5 #"\"Bug\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Grass\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"Ice\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Steel\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"getAttribute"
0 0 24 3 2 #" ("
0 0 14 3 14 #"gatherTypeInfo"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"Charmander\""
0 0 24 3 2 #") "
0 0 19 3 8 #"\"strDef\""
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 5 #"\"Bug\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Fairy\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Fire\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Grass\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"Ice\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Steel\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 45 #"; returns the types of the given pokemon name"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";(define (pokemonTypes name)"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";  (if (isMember name )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";(visualize-json-file file1)"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";(define (a)"
0 0 24 29 1 #"\n"
0 0 17 3 94
(
 #";(for ([i (build-list (length readFile) values)]) (if (odd? i) (numb"
 #"er->string i) \"not odd\")))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"#|(define (typeStrAttacking type)"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"  (define (helper type acc)"
0 0 17 29 1 #"\n"
0 0 17 3 9 #"    (cond"
0 0 17 29 1 #"\n"
0 0 17 3 25 #"      [(empty? type) acc]"
0 0 17 29 1 #"\n"
0 0 17 3 11 #"      [else"
0 0 17 29 1 #"\n"
0 0 17 3 12 #"       (sort"
0 0 17 29 1 #"\n"
0 0 17 3 16 #"        (flatten"
0 0 17 29 1 #"\n"
0 0 17 3 28 #"         (helper (rest type)"
0 0 17 29 1 #"\n"
0 0 17 3 33 #"                 (map (lambda (x)"
0 0 17 29 1 #"\n"
0 0 17 3 70
(
 #"                        (if (equal? (hash-ref (hash-ref x 'languages"
 #") "
) 0 0 17 3 23 #"'english) (first type))"
0 0 17 29 1 #"\n"
0 0 17 3 62
#"                            (append acc (hash-ref (hash-ref x "
0 0 17 3 28 #"'typeEffective) 'strongAtk))"
0 0 17 29 1 #"\n"
0 0 17 3 59
#"                            acc)) typesFile))) string<?)]))"
0 0 17 29 1 #"\n"
0 0 17 3 24 #"  (helper type empty))|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; typeStrAttacking takes in a type as a string"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; and returns a list of all types the given"
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; type has a strong attack against."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"typeStrAttacking"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"sort"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"flatten"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"languages"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"english"
0 0 24 3 2 #") "
0 0 14 3 4 #"type"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 13 #"typeEffective"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 9 #"strongAtk"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 14 3 3 #"acc"
0 0 24 3 3 #")) "
0 0 14 3 9 #"typesFile"
0 0 24 3 3 #")) "
0 0 14 3 8 #"string<?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"module+"
0 0 24 3 1 #" "
0 0 14 3 4 #"test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 8 #"rackunit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 16 #"typeStrAttacking"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"Fighting\""
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 6 #"\"Dark\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"Ice\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"Normal\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Rock\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Steel\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 45 #"; noeEffectAgainst takes in a type string and"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; returns a list of all types that type has"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; no effect against."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 19 #"typeNoEffectAgainst"
0 0 24 3 1 #" "
0 0 14 3 8 #"moveType"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"sort"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"flatten"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"languages"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"english"
0 0 24 3 2 #") "
0 0 14 3 4 #"type"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 13 #"typeEffective"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 8 #"noEffect"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 14 3 3 #"acc"
0 0 24 3 3 #")) "
0 0 14 3 9 #"typesFile"
0 0 24 3 3 #")) "
0 0 14 3 8 #"string<?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 8 #"moveType"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; strAttackHelper is a helper method to moveEffectiveness"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; it takes in a list of types for the defending pokemon"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; and a list of types that the attacking pokemon has a"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; type advantage over. Returns a list of booleans for each"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; defending type if it is found on the attacking advantage"
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; list. results are combined with bools evaluator to determine"
0 0 24 29 1 #"\n"
0 0 17 3 37 #"; if the match-up is super effective."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"strAtkHelper"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 1 #" "
0 0 14 3 13 #"moveStrAttack"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 1 #" "
0 0 14 3 13 #"moveStrAttack"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"helper"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 2 #") "
0 0 14 3 13 #"moveStrAttack"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 5 #"cons?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"member"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 2 #") "
0 0 14 3 13 #"moveStrAttack"
0 0 24 3 3 #")) "
0 0 14 3 3 #"acc"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 1 #" "
0 0 14 3 13 #"moveStrAttack"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; occur counts the number of occurences of a particular"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; item, exist in a given list. Returns a number count."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"occur"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"count"
0 0 24 3 2 #" ("
0 0 14 3 5 #"curry"
0 0 24 3 1 #" "
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; strDefHelper is a helper method to moveEffectiveness"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; it takes in a the type of the attacking pokemon move"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; and a list of types that the  for the defending pokemon"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; has a type advantage over. Returns a number based on the"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; calculated effectiveness for that move on the defending"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; pokemon."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"strDefHelper"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 1 #" "
0 0 14 3 13 #"pokemonStrDef"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 2 #" ("
0 0 14 3 5 #"occur"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 1 #" "
0 0 14 3 13 #"pokemonStrDef"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #"; boolsEvaluator takes in a list of booleans"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; and takes the logical or of each element."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"boolsEvaluator"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"helper"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 45 #"; boolsAdjust takes in a list of booleans and"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; returns a multiple of 2 based on how many #t"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; values are found."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"boolsAdjust"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"helper"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 3 #"acc"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 14 3 3 #"acc"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; moveEffectiveness takes in an attacking move type string and a"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; defending pokemon name string. Returns the calculated effectivenes"
 #"s"
) 0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #"; of that attacking move on the defending pokemon (0,0.25,0.5,1,2,4)"
 #"."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"moveEffectiveness"
0 0 24 3 1 #" "
0 0 14 3 8 #"moveType"
0 0 24 3 1 #" "
0 0 14 3 7 #"pokemon"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 1 #"E"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.0"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 15 #"pokemonTypeInfo"
0 0 24 3 2 #" ("
0 0 14 3 14 #"gatherTypeInfo"
0 0 24 3 1 #" "
0 0 14 3 7 #"pokemon"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 13 #"pokemonStrDef"
0 0 24 3 2 #" ("
0 0 14 3 12 #"getAttribute"
0 0 24 3 1 #" "
0 0 14 3 15 #"pokemonTypeInfo"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"strDef\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ["
0 0 14 3 13 #"moveStrAttack"
0 0 24 3 2 #" ("
0 0 14 3 16 #"typeStrAttacking"
0 0 24 3 1 #" "
0 0 14 3 8 #"moveType"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ["
0 0 14 3 8 #"noEffect"
0 0 24 3 2 #" ("
0 0 14 3 19 #"typeNoEffectAgainst"
0 0 24 3 1 #" "
0 0 14 3 8 #"moveType"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ["
0 0 14 3 4 #"type"
0 0 24 3 2 #" ("
0 0 14 3 12 #"getAttribute"
0 0 24 3 1 #" "
0 0 14 3 15 #"pokemonTypeInfo"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"type\""
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"cons?"
0 0 24 3 1 #" "
0 0 14 3 8 #"noEffect"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"foldl"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #" ("
0 0 14 3 5 #"cons?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 8 #"noEffect"
0 0 24 3 5 #")))) "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 3 #") ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.0"
0 0 24 3 3 #")) "
0 0 14 3 1 #"E"
0 0 24 3 2 #") "
0 0 14 3 1 #"E"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 4 #"mult"
0 0 24 3 2 #" ("
0 0 14 3 12 #"strDefHelper"
0 0 24 3 1 #" "
0 0 14 3 8 #"moveType"
0 0 24 3 1 #" "
0 0 14 3 13 #"pokemonStrDef"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 1 #" "
0 0 14 3 4 #"mult"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 5 #"bools"
0 0 24 3 2 #" ("
0 0 14 3 12 #"strAtkHelper"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 1 #" "
0 0 14 3 13 #"moveStrAttack"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 14 #"boolsEvaluator"
0 0 24 3 1 #" "
0 0 14 3 5 #"bools"
0 0 24 3 3 #") ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"E"
0 0 24 3 2 #" ("
0 0 14 3 11 #"boolsAdjust"
0 0 24 3 1 #" "
0 0 14 3 5 #"bools"
0 0 24 3 4 #"))) "
0 0 14 3 1 #"E"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 1 #"E"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"module+"
0 0 24 3 1 #" "
0 0 14 3 4 #"test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 8 #"rackunit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 24 #"; ghost vs normal == 0.0"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 17 #"moveEffectiveness"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"Ghost\""
0 0 24 3 1 #" "
0 0 19 3 10 #"\"Raticate\""
0 0 24 3 2 #") "
0 0 21 3 3 #"0.0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 27 #"; electric vs ground == 0.0"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 17 #"moveEffectiveness"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"Electric\""
0 0 24 3 1 #" "
0 0 19 3 11 #"\"Sandslash\""
0 0 24 3 2 #") "
0 0 21 3 3 #"0.0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 27 #"; electric vs flying == 2.0"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 17 #"moveEffectiveness"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"Electric\""
0 0 24 3 1 #" "
0 0 19 3 9 #"\"Pidgeot\""
0 0 24 3 2 #") "
0 0 21 3 3 #"2.0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 22 #"; fire vs water == 0.5"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 17 #"moveEffectiveness"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Fire\""
0 0 24 3 1 #" "
0 0 19 3 10 #"\"Squirtle\""
0 0 24 3 2 #") "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 26 #"; fire vs grass ice == 4.0"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 17 #"moveEffectiveness"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Fire\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"Snover\""
0 0 24 3 2 #") "
0 0 21 3 3 #"4.0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 35 #"; psychic vs poison fighting == 4.0"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 17 #"moveEffectiveness"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"Psychic\""
0 0 24 3 1 #" "
0 0 19 3 10 #"\"Croagunk\""
0 0 24 3 2 #") "
0 0 21 3 3 #"4.0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 28 #"; fire vs steel water == 1.0"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 17 #"moveEffectiveness"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Fire\""
0 0 24 3 1 #" "
0 0 19 3 10 #"\"Empoleon\""
0 0 24 3 2 #") "
0 0 21 3 3 #"1.0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 35 #"; fighting vs flying poison == 0.25"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 17 #"moveEffectiveness"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"Fighting\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"Crobat\""
0 0 24 3 2 #") "
0 0 21 3 4 #"0.25"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 52 #"; convertNum takes in a number value and returns the"
0 0 24 29 1 #"\n"
0 0 17 3 60
#"; equivalent number in natural form (no decimals, max: 809)."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"convertNum"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 14 3 1 #"i"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 8 #"readFile"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"convertNum"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"Invalid number given\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; genTeam will randomly generate a team of six pokemon"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; returns a list of hasheqs (result of gatherTypeInfo)."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"genTeam"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 4 #"team"
0 0 24 3 1 #" "
0 0 14 3 7 #"members"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 14 3 7 #"members"
0 0 24 3 2 #") "
0 0 14 3 4 #"team"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"helper"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 14 #"gatherTypeInfo"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 8 #"readFile"
0 0 24 3 2 #" ("
0 0 14 3 10 #"convertNum"
0 0 24 3 2 #" ("
0 0 14 3 5 #"floor"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 3 #") ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 8 #"readFile"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                               "
0 0 21 3 1 #"'"
0 0 14 3 4 #"name"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"english"
0 0 24 3 3 #")) "
0 0 14 3 4 #"team"
0 0 24 3 3 #") ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 7 #"members"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; bestTeamDefender takes in a list of pokemon considered"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; a team, and an attacking move type. Returns the best"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; pokemon to defend against the move type as a hasheq."
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; (typically effectiveness recieved == 0 || 0.5 || 1)."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"bestTeamDefender"
0 0 24 3 1 #" "
0 0 14 3 4 #"team"
0 0 24 3 1 #" "
0 0 14 3 8 #"moveType"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 4 #"team"
0 0 24 3 1 #" "
0 0 14 3 8 #"moveType"
0 0 24 3 1 #" "
0 0 14 3 10 #"bestChoice"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"team"
0 0 24 3 2 #") "
0 0 14 3 10 #"bestChoice"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"helper"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"team"
0 0 24 3 2 #") "
0 0 14 3 8 #"moveType"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 17 #"moveEffectiveness"
0 0 24 3 1 #" "
0 0 14 3 8 #"moveType"
0 0 24 3 2 #" ("
0 0 14 3 12 #"getAttribute"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"team"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"name\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 49 #"                                                ("
0 0 14 3 17 #"moveEffectiveness"
0 0 24 3 1 #" "
0 0 14 3 8 #"moveType"
0 0 24 3 2 #" ("
0 0 14 3 12 #"getAttribute"
0 0 24 3 1 #" "
0 0 14 3 10 #"bestChoice"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"name\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                             "
0 0 14 3 10 #"bestChoice"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"team"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"helper"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"team"
0 0 24 3 2 #") "
0 0 14 3 8 #"moveType"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"team"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; worstTeamDefender takes in a list of pokemon considered"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; a team, and an attacking move type. Returns the worst"
0 0 24 29 1 #"\n"
0 0 17 3 54 #"; pokemon to defend against the move type as a hasheq."
0 0 24 29 1 #"\n"
0 0 17 3 52 #"; (typically effectiveness recieved == 1 || 2 || 4)."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"worstTeamDefender"
0 0 24 3 1 #" "
0 0 14 3 4 #"team"
0 0 24 3 1 #" "
0 0 14 3 8 #"moveType"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"helper"
0 0 24 3 1 #" "
0 0 14 3 4 #"team"
0 0 24 3 1 #" "
0 0 14 3 8 #"moveType"
0 0 24 3 1 #" "
0 0 14 3 10 #"bestChoice"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"team"
0 0 24 3 2 #") "
0 0 14 3 10 #"bestChoice"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"helper"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"team"
0 0 24 3 2 #") "
0 0 14 3 8 #"moveType"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 17 #"moveEffectiveness"
0 0 24 3 1 #" "
0 0 14 3 8 #"moveType"
0 0 24 3 2 #" ("
0 0 14 3 12 #"getAttribute"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"team"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"name\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 49 #"                                                ("
0 0 14 3 17 #"moveEffectiveness"
0 0 24 3 1 #" "
0 0 14 3 8 #"moveType"
0 0 24 3 2 #" ("
0 0 14 3 12 #"getAttribute"
0 0 24 3 1 #" "
0 0 14 3 10 #"bestChoice"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"name\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                             "
0 0 14 3 10 #"bestChoice"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"team"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"helper"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"team"
0 0 24 3 2 #") "
0 0 14 3 8 #"moveType"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"team"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; getTypeListNames returns a list of all pokemon"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; types as strings."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"getTypeListNames"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"type"
0 0 24 3 3 #") ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"languages"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"english"
0 0 24 3 4 #" )) "
0 0 14 3 9 #"typesFile"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 55 #"; genGivenTeam takes in a list of strings corresponding"
0 0 24 29 1 #"\n"
0 0 17 3 59
#"; to pokemon names, and returns a list of hasheqs resulting"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; from the gatherTypeInfo method."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"genGivenTeam"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 4 #"bool"
0 0 24 3 2 #" ("
0 0 14 3 5 #"foldl"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"isMember"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 11 #"getAllNames"
0 0 24 3 3 #")) "
0 0 14 3 1 #"y"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 4 #"bool"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 14 #"gatherTypeInfo"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"genGivenTeam"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"Invalid team given\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 65
#"; teamEffectivenessPerType takes in a list of hasheqs repesenting"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #"; a team. Displays and returns a table of all types and each pokemon"
 #"'s"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 24 #"teamEffectivenessPerType"
0 0 24 3 1 #" "
0 0 14 3 4 #"team"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 79
(
 #"\" ((NRM FGT FLY PSN GRD RCK BUG GST STL FIR WTR GRS ELC PSY ICE DRG"
 #" DRK FRY)\\n\""
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"member"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"type"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 17 #"moveEffectiveness"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 2 #" ("
0 0 14 3 12 #"getAttribute"
0 0 24 3 1 #" "
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"name\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 16 #"getTypeListNames"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 4 #"team"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #" ("
0 0 14 3 7 #"genTeam"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"moveType"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"Electric\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 16 #"bestTeamDefender"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 8 #"moveType"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 17 #"worstTeamDefender"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 8 #"moveType"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"pearlTeamList"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 19 3 11 #"\"Infernape\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"Gengar\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"Luxray\""
0 0 24 3 1 #" "
0 0 19 3 10 #"\"Gyarados\""
0 0 24 3 1 #" "
0 0 19 3 10 #"\"Garchomp\""
0 0 24 3 1 #" "
0 0 19 3 10 #"\"Alakazam\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"reportTeamMoveVote"
0 0 24 3 1 #" "
0 0 14 3 4 #"team"
0 0 24 3 1 #" "
0 0 14 3 4 #"move"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 17 #"teamEffectiveness"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 12 #"getAttribute"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"name\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 17 #"moveEffectiveness"
0 0 24 3 1 #" "
0 0 14 3 4 #"move"
0 0 24 3 2 #" ("
0 0 14 3 12 #"getAttribute"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"name\""
0 0 24 3 5 #")))) "
0 0 14 3 4 #"team"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 13 #"bestCandidate"
0 0 24 3 2 #" ("
0 0 14 3 16 #"bestTeamDefender"
0 0 24 3 1 #" "
0 0 14 3 4 #"team"
0 0 24 3 1 #" "
0 0 14 3 4 #"move"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 14 #"worstCandidate"
0 0 24 3 2 #" ("
0 0 14 3 17 #"worstTeamDefender"
0 0 24 3 1 #" "
0 0 14 3 4 #"team"
0 0 24 3 1 #" "
0 0 14 3 4 #"move"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 6 #"effect"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 17 #"moveEffectiveness"
0 0 24 3 1 #" "
0 0 14 3 4 #"move"
0 0 24 3 1 #"("
0 0 14 3 12 #"getAttribute"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"name\""
0 0 24 3 5 #")))])"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"\\n\\t\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 4 #"move"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 35 #"\" type move V.S. trainer's team:\\n\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 17 #"teamEffectiveness"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 35 #"\"\\n\\tBest pokemon to defend with: \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 6 #"effect"
0 0 24 3 1 #" "
0 0 14 3 13 #"bestCandidate"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"\\n\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 13 #"bestCandidate"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 36 #"\"\\n\\tWorst pokemon to defend with: \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 6 #"effect"
0 0 24 3 1 #" "
0 0 14 3 14 #"worstCandidate"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"\\n\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 14 #"worstCandidate"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"\\n\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 18 #"reportTeamMoveVote"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 8 #"moveType"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 24 #"teamEffectivenessPerType"
0 0 24 3 2 #" ("
0 0 14 3 12 #"genGivenTeam"
0 0 24 3 1 #" "
0 0 14 3 13 #"pearlTeamList"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"sum"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"foldl"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"overall"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 3 #"sum"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"module+"
0 0 24 3 1 #" "
0 0 14 3 4 #"test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 8 #"rackunit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"overall"
0 0 24 3 2 #" ("
0 0 14 3 24 #"teamEffectivenessPerType"
0 0 24 3 2 #" ("
0 0 14 3 12 #"genGivenTeam"
0 0 24 3 1 #" "
0 0 14 3 13 #"pearlTeamList"
0 0 24 3 4 #"))) "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 5 #"18.75"
0 0 24 3 1 #" "
0 0 21 3 5 #"17.75"
0 0 24 3 1 #" "
0 0 21 3 4 #"17.5"
0 0 24 3 1 #" "
0 0 21 3 4 #"18.5"
0 0 24 3 1 #" "
0 0 21 3 4 #"20.5"
0 0 24 3 1 #" "
0 0 21 3 4 #"20.0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 32 #"listAllPokemonMatchEffectiveness"
0 0 24 3 1 #" "
0 0 14 3 7 #"pokemon"
0 0 24 3 1 #" "
0 0 14 3 13 #"effectiveness"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 7 #"pokemon"
0 0 24 3 2 #" ("
0 0 14 3 12 #"getAttribute"
0 0 24 3 2 #" ("
0 0 14 3 14 #"gatherTypeInfo"
0 0 24 3 1 #" "
0 0 14 3 7 #"pokemon"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"type\""
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 7 #"pokemon"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 10 #"allPokemon"
0 0 24 3 1 #" "
0 0 14 3 8 #"readFile"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 4 #"type"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"pokemon"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 10 #"secondType"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"pokemon"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 7 #"flatten"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"poke"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 13 #"effectiveness"
0 0 24 3 2 #" ("
0 0 14 3 17 #"moveEffectiveness"
0 0 24 3 1 #" "
0 0 14 3 4 #"type"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 4 #"poke"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"name"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 7 #"english"
0 0 24 3 5 #")))) "
0 0 14 3 10 #"allPokemon"
0 0 24 3 7 #")))])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"module+"
0 0 24 3 1 #" "
0 0 14 3 4 #"test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 8 #"rackunit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"pokemon"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"Charmander\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 3 #"0.0"
0 0 24 3 1 #" "
0 0 21 3 4 #"0.25"
0 0 24 3 1 #" "
0 0 21 3 3 #"0.5"
0 0 24 3 1 #" "
0 0 21 3 3 #"1.0"
0 0 24 3 1 #" "
0 0 21 3 3 #"2.0"
0 0 24 3 1 #" "
0 0 21 3 3 #"4.0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 32 #"listAllPokemonMatchEffectiveness"
0 0 24 3 1 #" "
0 0 14 3 7 #"pokemon"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"check-equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"foldl"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #"))) "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #") ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 8 #"readFile"
0 0 24 3 3 #")))"
0           0
